<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Course Faculty Selection</title>
    <link rel="stylesheet" href="/styles/allotment.css">
</head>

<body>
    <%- include('faculty-incharge-header', {email: email, password: password, deptId: deptId }) %>
    <% if (seasonClosed) { %>
        <div class="alert alert-warning">
            <%= message %>
        </div>
        <% } else { %>
    <form id="faculty-allocation-form">
        <!-- Program Dropdown -->
        <label for="program">Select Program:</label>
        <select id="program" name="program">
            <% if (departmentData && departmentData.programs) { %>
                <% departmentData.programs.forEach(function(program) { %>
                    <option value="<%= program.programme_id %>"><%= program.programme_name %></option>
                <% }) %>
            <% } else { %>
                <option value="">No Programs Available</option>
            <% } %>
        </select>
    
        <!-- Core Courses Table Grouped by Semester (Excluding Electives) -->
        <% if (departmentData && departmentData.courses) { %>
            <% 
                const groupedCoreCourses = {};
                departmentData.courses.forEach(function(course) {
                    if (course.course_type !== 'Elective') {
                        if (!groupedCoreCourses[course.semester_number]) {
                            groupedCoreCourses[course.semester_number] = [];
                        }
                        groupedCoreCourses[course.semester_number].push(course);
                    }
                });
            %>
    
            <% Object.keys(groupedCoreCourses).forEach(function(semester) { %>
                <h2>Semester: <%= semester %></h2>
                <table>
                    <thead>
                        <tr>
                            <th>Course Name</th>
                            <th>Faculty</th>
                            <th>Hours Per Week</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% groupedCoreCourses[semester].forEach(function(course) { %>
                            <tr>
                                <td><%= course.course_id %> - <%= course.course_name %></td>
                                <td>
                                    <div class="dropdown">
                                        <button type="button">Select Faculties</button>
                                        <div class="dropdown-content">
                                            <% if (departmentData.faculties) { %>
                                                <% departmentData.faculties.forEach(function(faculty) { 
                                                    const isChecked = facultyAllocations.some(allocation => allocation.course_id === course.course_id && allocation.faculty_id === faculty.faculty_id);
                                                %>
                                                    <label>
                                                        <input type="checkbox" 
                                                            class="faculty-checkbox" 
                                                            data-course-id="<%= course.course_id %>" 
                                                            value="<%= faculty.faculty_id %>" 
                                                            data-name="<%= faculty.name %>"
                                                            <%= facultyAllocations.some(allocation => allocation.course_id === course.course_id && allocation.faculty_id === faculty.faculty_id) ? 'checked' : '' %>> 
                                                            <%= faculty.faculty_id %> <%= faculty.name %>
                                                    </label>
                                                <% }) %>
                                            <% } else { %>
                                                <p>No Faculties Available</p>
                                            <% } %>
                                        </div>
                                    </div>
                                    <div id="selected-faculty-<%= course.course_id %>" class="selected-faculty"></div>
                                </td>
                                <td><%= course.hours_per_week %></td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            <% }) %>
        <% } else { %>
            <p>No Courses Available</p>
        <% } %>
    
        <!-- Elective Courses Section -->
        <% if (departmentData && departmentData.electives) { %>
            <h2>Electives</h2>
            <% departmentData.electives.forEach(function(elective) { %>
                <div class="elective-group">
                    <h3>Program: <%= elective.programme_id %> - Semester: <%= elective.semester_number %></h3>
                    <% for (let i = 1; i <= elective.number_of_electives; i++) { %>
                        <div class="elective-course" id="elective-course-group-<%= elective.semester_number %>-<%= i %>">
                            <label>Elective <%= i %>:</label>
                            <div class="elective-courses">
                                <div class="elective-course-entry">
                                    <% if (elective.courses && Array.isArray(elective.courses) && elective.courses.length > 0) { %>
                                        <% elective.courses.forEach(function(course) { %>
                                            <tr>
                                                <td><%= course.course_id %> - <%= course.course_name %></td>
                                                <td>
                                                    <div class="dropdown">
                                                        <button type="button">Select Faculties</button>
                                                        <div class="dropdown-content">
                                                            <% if (departmentData.faculties) { %>
                                                                <% departmentData.faculties.forEach(function(faculty) { 
                                                                    const isChecked = facultyAllocations.some(allocation => allocation.course_id === course.course_id && allocation.faculty_id === faculty.faculty_id);
                                                                %>
                                                                <label>
                                                                    <input type="checkbox" 
                                                                        class="faculty-checkbox" 
                                                                        data-course-id="<%= course.course_id %>" 
                                                                        value="<%= faculty.faculty_id %>" 
                                                                        data-name="<%= faculty.name %>"
                                                                        <%= facultyAllocations.some(allocation => allocation.course_id === course.course_id && allocation.faculty_id === faculty.faculty_id) ? 'checked' : '' %>> 
                                                                        <%= faculty.faculty_id %> <%= faculty.name %>
                                                                </label>
                                                                <% }) %>
                                                            <% } else { %>
                                                                <p>No Faculties Available</p>
                                                            <% } %>
                                                        </div>
                                                    </div>
                                                </td>
                                            </tr>
                                        <% }) %>
                                    <% } else { %>
                                    <% } %>
                                </div>
                                
                            </div>
                            <button type="button" class="add-course-btn" 
                                data-semester="<%= elective.semester_number %>" 
                                data-elective="<%= i %>" 
                                data-program="<%= elective.programme_id %>">
                                Add Another Course
                            </button>
                        </div>
                    <% } %>
                </div>
            <% }) %>
        <% } %>
    
        <!-- Submit button -->
        <button type="button" id="submit-button">Submit Allocation</button>
    </form>
    
    <script>
        const facultyWorkload = {};
        const programData = JSON.parse(`<%- JSON.stringify(departmentData).replace(/\\/g, '\\\\').replace(/"/g, '\\"') %>`);
        const electiveAllocations = JSON.parse(`<%- JSON.stringify(electiveAllocations).replace(/\\/g, '\\\\').replace(/"/g, '\\"') %>`);
        const facultyAllocations = JSON.parse(`<%- JSON.stringify(facultyAllocations).replace(/\\/g, '\\\\').replace(/"/g, '\\"') %>`);
    
        programData.faculties.forEach(faculty => {
            facultyWorkload[faculty.faculty_id] = {
                assigned: 0,
                max_workload: faculty.max_workload
            };
        });
    
        document.addEventListener('DOMContentLoaded', function() {
            displayPreSelectedFaculties();
            prefillElectiveAllocations();
        });
    
        function handleFacultySelection(checkbox, facultyClass) {
            const facultyId = checkbox.value;
            const isChecked = checkbox.checked;
            const facultyName = checkbox.dataset.name;
            const currentWorkload = facultyWorkload[facultyId];
    
            if (isChecked) {
                if (currentWorkload.assigned >= currentWorkload.max_workload) {
                    alert(`Warning: ${facultyName} has already reached the maximum workload.`);
                    checkbox.checked = false;
                } else {
                    currentWorkload.assigned += 1;
                }
            } else {
                currentWorkload.assigned = Math.max(0, currentWorkload.assigned - 1);
            }
    
            const courseId = checkbox.dataset.courseId;
            updateSelectedFaculty(courseId, facultyClass, 'selected-faculty-' + courseId);
        }
    
        function updateSelectedFaculty(courseId, facultyClass, facultyDivId) {
            const selectedFacultyDiv = document.getElementById(facultyDivId);
            const selectedCheckboxes = document.querySelectorAll(`.${facultyClass}[data-course-id="${courseId}"]:checked`);
            const selectedFacultyNames = Array.from(selectedCheckboxes).map(function (checkbox) {
                return checkbox.dataset.name;
            });
            selectedFacultyDiv.textContent = selectedFacultyNames.join(', ');
        }
    
        function displayPreSelectedFaculties() {
            document.querySelectorAll('.faculty-checkbox:checked, .faculty-checkbox-elective:checked').forEach(checkbox => {
                const courseId = checkbox.dataset.courseId;
                const facultyClass = checkbox.classList.contains('faculty-checkbox') ? 'faculty-checkbox' : 'faculty-checkbox-elective';
                updateSelectedFaculty(courseId, facultyClass, 'selected-faculty-' + courseId);
            });
        }
    
        function prefillElectiveAllocations() {
            electiveAllocations.forEach(function(allocation) {
                const { course_id, elective_no, semester_number, strength } = allocation;
                const groupContainer = document.getElementById(`elective-course-group-${semester_number}-${elective_no}`);
    
                if (groupContainer) {
                    addCourse(semester_number, elective_no); // Dynamically add the course entry
    
                    const courseEntry = groupContainer.querySelector('.elective-course-entry:last-child');
                    const courseSelect = courseEntry.querySelector(`.elective-course-select`);
                    const courseId = `${semester_number}-${elective_no}-${Date.now()}`;
    
                    // Pre-fill the course
                    if (courseSelect) {
                        courseSelect.value = course_id;
                    }
    
                    // Pre-fill the strength
                    const strengthInput = courseEntry.querySelector(`input[name="electives[${semester_number}][${elective_no}][student_strength]"]`);
                    if (strengthInput) {
                        strengthInput.value = strength;
                    }
    
                    // Pre-fill the assigned faculties
                    const assignedFaculties = facultyAllocations.filter(facultyAlloc => facultyAlloc.course_id === course_id);
                    assignedFaculties.forEach(function(faculty) {
                        const facultyCheckbox = courseEntry.querySelector(`.faculty-checkbox-elective[value="${faculty.faculty_id}"]`);
                        if (facultyCheckbox) {
                            facultyCheckbox.checked = true;
                            handleFacultySelection(facultyCheckbox, 'faculty-checkbox-elective');
                        }
                    });
                }
            });
        }

        document.querySelectorAll('.add-course-btn').forEach(function (button) {
        button.addEventListener('click', function () {
            const semester = button.dataset.semester;
            const elective = button.dataset.elective;
            const groupContainer = document.getElementById(`elective-course-group-${semester}-${elective}`);

            // Create a new unique course entry with a temporary ID
            const courseEntry = document.createElement('div');
            const courseId = `${semester}-${elective}-${Date.now()}`; // Temporary unique ID

            courseEntry.className = 'elective-course-entry';
            courseEntry.innerHTML = `
                <select name="electives[${semester}][${elective}][]" class="elective-course-select" data-course-id="${courseId}">
                    <option value="">Select a course</option>
                    <% departmentData.courses.forEach(function (course) { %>
                        <% if (course.course_type === 'Elective') { %>
                            <option value="<%= course.course_id %>"><%= course.course_id %> <%= course.course_name %></option>
                        <% } %>
                    <% }) %>
                </select>
                <br/>
                <label>Assign Faculty:</label>
                <div class="dropdown">
                    <button type="button">Select Faculties</button>
                    <div class="dropdown-content">
                        <% allFaculties.forEach(function (faculty) { %>
                            <label>
                                <input type="checkbox"
                                    class="faculty-checkbox-elective"
                                    data-course-id="${courseId}"
                                    value="<%= faculty.faculty_id %>"
                                    data-name="<%= faculty.name %>">
                                <%= faculty.name %>
                            </label>
                        <% }) %>
                    </div>
                </div>
                <label for="student-strength">Student Strength:</label>
                <input type="number" name="electives[${semester}][${elective}][student_strength]" min="1" required placeholder="Enter student strength" data-course-id="${courseId}">
                <br/>
                <div id="selected-faculty-${courseId}" class="selected-faculty"></div>
                <button type="button" class="remove-course-btn">Remove Course</button>
            `;

            // Append the course entry to the elective group
            groupContainer.querySelector('.elective-courses').appendChild(courseEntry);

            // Add event listener for removing the course
            courseEntry.querySelector('.remove-course-btn').addEventListener('click', function () {
                courseEntry.remove();
            });

            // Add event listener for dynamically selected courses to update checkboxes
            const courseSelect = courseEntry.querySelector('.elective-course-select');
            courseSelect.addEventListener('change', function () {
                const selectedCourseId = courseSelect.value;

                // Update the actual course ID on faculty checkboxes when a course is selected
                courseEntry.querySelectorAll('.faculty-checkbox-elective').forEach(function (checkbox) {
                    checkbox.setAttribute('data-course-id-actual', selectedCourseId);
                });
            });

            // Add event listener for faculty selection checkboxes
            courseEntry.querySelectorAll('.faculty-checkbox-elective').forEach(function (checkbox) {
                checkbox.addEventListener('change', function (event) {
                    handleFacultySelection(event.target, 'faculty-checkbox-elective');
                });
            });
        });
    });
   
        function addCourse(semester, elective) {
            const groupContainer = document.getElementById(`elective-course-group-${semester}-${elective}`);
            const courseEntry = document.createElement('div');
            const courseId = `${semester}-${elective}-${Date.now()}`;
    
            courseEntry.className = 'elective-course-entry';
            courseEntry.innerHTML = `
                <select name="electives[${semester}][${elective}][]" class="elective-course-select" data-course-id="${courseId}">
                    <option value="">Select a course</option>
                    <% departmentData.courses.forEach(function(course) { %>
                        <% if (course.course_type === 'Elective') { %>
                            <option value="<%= course.course_id %>"><%= course.course_id %> <%= course.course_name %></option>
                        <% } %>
                    <% }) %>
                </select>
                <br/>
                <label>Assign Faculty:</label>
                <div class="dropdown">
                    <button type="button">Select Faculties</button>
                    <div class="dropdown-content">
                        <% allFaculties.forEach(function(faculty) { %>
                            <label>
                                <input type="checkbox"
                                    class="faculty-checkbox-elective"
                                    data-course-id="${courseId}"
                                    value="<%= faculty.faculty_id %>"
                                    data-name="<%= faculty.name %>">
                                <%= faculty.faculty_id %> <%= faculty.name %>
                            </label>
                        <% }) %>
                    </div>
                </div>
                <label for="student-strength">Student Strength:</label>
                <input type="number" name="electives[${semester}][${elective}][student_strength]" min="1" required placeholder="Enter student strength" data-course-id="${courseId}">
                <br/>
                <div id="selected-faculty-${courseId}" class="selected-faculty"></div>
                <button type="button" class="remove-course-btn">Remove Course</button>
            `;
    
            groupContainer.querySelector('.elective-courses').appendChild(courseEntry);
    
            courseEntry.querySelector('.remove-course-btn').addEventListener('click', function() {
                courseEntry.remove();
            });
    
            const courseSelect = courseEntry.querySelector('.elective-course-select');
            courseSelect.addEventListener('change', function() {
                const selectedCourseId = courseSelect.value;
                courseEntry.querySelectorAll('.faculty-checkbox-elective').forEach(function(checkbox) {
                    alert(selectedCourseId);
                    checkbox.setAttribute('data-course-id-actual', selectedCourseId);
                });
            });
    
            courseEntry.querySelectorAll('.faculty-checkbox-elective').forEach(function(checkbox) {
                checkbox.addEventListener('change', function(event) {
                    handleFacultySelection(event.target, 'faculty-checkbox-elective');
                });
            });
        }

        // Event listener for static faculty selection (for already existing static courses)
        document.querySelectorAll('.faculty-checkbox').forEach(function (checkbox) {
            checkbox.addEventListener('change', function (event) {
                handleFacultySelection(event.target, 'faculty-checkbox');
            });
        });
    
   // Gather selected faculties for electives
   document.getElementById('submit-button').addEventListener('click', function () {
    const selectedData = {
        program: document.getElementById('program').value,
        coreCourses: {},
        electives: {}
    };

    // Gather selected faculties for core courses
    document.querySelectorAll('.faculty-checkbox:checked').forEach(function (checkbox) {
        const courseId = checkbox.dataset.courseId;
        if (!selectedData.coreCourses[courseId]) {
            selectedData.coreCourses[courseId] = [];
        }
        selectedData.coreCourses[courseId].push(checkbox.value);
    });

    // Gather selected faculties and student strength for electives
    document.querySelectorAll('.faculty-checkbox-elective:checked').forEach(function (checkbox) {
        const courseIdActual = checkbox.closest('.elective-course-entry').querySelector('.elective-course-select').value;
        const [semesterNo, electiveNo] = checkbox.dataset.courseId.split('-'); // Extract semester and elective numbers

        if (!courseIdActual) {
            // Skip if no course is selected
            console.warn("No course selected for an elective.");
            return;
        }

        if (!selectedData.electives[semesterNo]) {
            selectedData.electives[semesterNo] = {}; // Initialize semester
        }
        if (!selectedData.electives[semesterNo][`Elective ${electiveNo}`]) {
            selectedData.electives[semesterNo][`Elective ${electiveNo}`] = {}; // Initialize elective group
        }

        if (!selectedData.electives[semesterNo][`Elective ${electiveNo}`][courseIdActual]) {
            selectedData.electives[semesterNo][`Elective ${electiveNo}`][courseIdActual] = {
                faculty: [],
                strength: 0
            };
        }
        selectedData.electives[semesterNo][`Elective ${electiveNo}`][courseIdActual].faculty.push(checkbox.value);
    });

    // Gather student strength inputs
    document.querySelectorAll('input[name^="electives"][type="number"]').forEach(function (input) {
        const nameParts = input.name.match(/electives\[(\d+)\]\[(\d+)\]\[student_strength\]/);
        if (nameParts) {
            const semesterNo = nameParts[1];
            const electiveNo = nameParts[2];
            const courseSelect = input.closest('.elective-course-entry').querySelector('.elective-course-select');
            const courseIdActual = courseSelect ? courseSelect.value : null;

            if (courseIdActual) {
                // Ensure the structure exists in selectedData
                if (!selectedData.electives[semesterNo]) {
                    selectedData.electives[semesterNo] = {};
                }
                if (!selectedData.electives[semesterNo][`Elective ${electiveNo}`]) {
                    selectedData.electives[semesterNo][`Elective ${electiveNo}`] = {};
                }
                if (!selectedData.electives[semesterNo][`Elective ${electiveNo}`][courseIdActual]) {
                    selectedData.electives[semesterNo][`Elective ${electiveNo}`][courseIdActual] = { faculty: [] };
                }

                // Assign the strength
                const strengthValue = input.value;
                
                if (!isNaN(strengthValue)) {
                    selectedData.electives[semesterNo][`Elective ${electiveNo}`][courseIdActual].strength = strengthValue;
                }
            } else {
                console.warn("Course ID not found for an elective entry. Ensure a course is selected.");
            }
        }
    });

    // Submit the data to the backend
    fetch('/addAllotments', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(selectedData)
    })
    .then(response => response.json())
    .then(data => {
        alert('Submission successful: ' + JSON.stringify(data));
    })
    .catch(error => {
        console.error('Error submitting data:', error);
        alert('Error submitting data. Please try again.');
    });
});
    </script>
   <% } %>
</body>

</html>